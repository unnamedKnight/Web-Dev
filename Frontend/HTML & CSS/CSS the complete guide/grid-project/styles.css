.container {
    margin: 20px;
    display: grid;
    /* By default display:grid give us one column */
    /* The following CSS rules specifies the number of column we want */
    /* In the following scenario 1st column will 200px wide, second column 150px and third column is 20% wide */
    grid-template-columns: 200px 150px 20% 1fr;
    /* column-gap: 20px;
    row-gap: 10px; */
    /* gap: 10px 30px; */
    /* We create rows by providing each rows height */
    grid-template-rows: 5rem 50px 10rem;

    /* We need to use names for as many rows and columns as we have */
    /* Here, the first row has a header area
        the second row has two areas side and main
        and third row has one area footer
    if we want to leave some cells empty we can dot(.). For example:
            '. . main main'   

    if we don't specify the positioning of some grid-elements
    by default those will take the empty space

    with grid-area the DOM order is not respected
    */
    grid-template-areas: 'header header header header'
        '. . main main'
        'footer footer footer footer'
    ;
}

.el1 {
    background: rgba(255, 154, 72, 0.5);
}

.el2 {
    background: rgba(255, 0, 0, 0.5);
    /* when we define the following code this grid-element will take the space of the entire row */
    /* grid-column-start: 1;
    grid-column-end: -1;
    grid-row: 3 / 4; */
    /* grid-column: 2 / 3; */
    /* z-index: 1; */
    grid-area: main;
}

.el3 {
    background: rgba(0, 128, 0, 0.5);
    /* grid-column: 3 / -1; */
    /* grid-column: 1 / -1; */
    /* grid-row: 3 / 4; */
    /* grid-row: 1 / -1; */
    /* grid-row: 1 / span 2; */
    grid-area: header;
}

.el4 {
    background: rgba(0, 4, 255, 0.5);
    /* grid-row-start: 1;
    grid-row-end: 2; */
    /* grid-column: 1 / -1; */
    /* grid-row: 2 / 3; */
    grid-area: footer;
}

/* .el5 {
    background: rgba(255, 154, 72, 0.5);
}

.el6 {
    background: rgba(255, 0, 0, 0.5);
}

.el7 {
    background: rgba(0, 128, 0, 0.5);
} */